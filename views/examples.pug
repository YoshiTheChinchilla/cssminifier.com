extends layout

block content
  h3 Curl
  pre.
    # minifying some CSS
    curl -X POST -s --data-urlencode 'input=p { color : red; }' #{env.baseUrl}/raw

    # minifying a CSS file (e.g. style.css -> style.min.css)
    curl -X POST -s --data-urlencode 'input@style.css' #{env.baseUrl}/raw > style.min.css

  h3 Node.js
  pre.
    var querystring = require('querystring');
    var http  = require('http');

    var query = querystring.stringify({
        input : css
    });

    var req = http.request(
        {
            method   : 'POST',
            hostname : '#{env.baseUrl}',
            path     : '/raw',
        },
        function(resp) {
            // if the statusCode isn't what we expect, get out of here
            if ( resp.statusCode !== 200 ) {
                console.log('StatusCode=' + resp.statusCode);
                return;
            }

            resp.pipe(process.stdout);
        }
    );
    req.on('error', function(err) {
        throw err;
    });
    req.setHeader('Content-Type', 'application/x-www-form-urlencoded');
    req.setHeader('Content-Length', query.length);
    req.end(query, 'utf8');

  h3 PHP
  pre.
    &lt;?php
        // setup the URL, the CSS and the form data
        $url = '#{env.baseUrl}/raw';
        $css = file_get_contents('./public/s/css/style.css');
        $data = array(
            'input' =&gt; $css,
        );

        // init the request, set some info, send it and finally close it
        $ch = curl_init($url);

        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

        $minified = curl_exec($ch);

        curl_close($ch);

        // output the $minified
        echo $minified;
    ?&gt;

  p
    | Also, Toni Almeida has made a PHP library to easily talk to CSS Minifier : 
    a(href="https://github.com/promatik/PHP-JS-CSS-Minifier") https://github.com/promatik/PHP-JS-CSS-Minifier
    | .

  h3 Perl
  p Thanks to Boris Kotyrev (I've adapted what he sent to be more minimal).
  pre.
    use strict;
    use warnings;

    use File::Slurp;
    use HTTP::Request::Common qw(POST);
    use LWP::UserAgent;

    sub minify{
        my ($css) = @_;

        my $css_min_url = "#{env.baseUrl}/raw";

        my $ua = LWP::UserAgent->new;
        my $request = POST($css_min_url, [ 'input' => $css ]);
        my $css_min = $ua->request($request)->decoded_content();

        return $css_min;
    }

    print minify($css, "\n");

  h3 LWP Request
  pre.
    $ lwp-request -m POST #{env.baseUrl}/raw
    Please enter content (application/x-www-form-urlencoded) to be POSTed:
    input=p%20{%20color:%20white;%20}
    ^D

  h3 More Languages

  p.
    I'd love to add more examples in your favourite programming language, so feel free to send them my way. andychilton
    at that gmail place in the sky.
